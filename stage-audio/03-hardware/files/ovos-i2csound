#!/bin/bash
##########################################################################
# ovos-i2csound
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##########################################################################

# Global configuration paths
ASOUND_STATE="/var/lib/alsa/default-asound.state"
PULSE_SYSTEM="/etc/pulse/system.pa.d/pulseaudio-system.pa"
PULSE_DAEMON="/etc/pulse/pulseaudio-daemon.conf"

# Define a list of device names and their I2C addresses
declare -A devices=(
    [WM8960]=0x1a
    [RESPEAKER4]=0x3b
    [RESPEAKER6]=0x35
    [ADAFRUIT]=0x4b
    [TAS5806]=0x2f
    [SJ201LED]=0x04
    [AIYVOICEBONNET]=0x52
)

declare -A detection_results

# Detects the presence of an I2C device at the specified address range
detect_i2c_device() {
    local address=$1
    if i2cdetect -y -a 1 "$address" "$address" | grep -qE "($address|UU)"; then
        return 0  # true
    else
        return 1  # false
    fi
}

# Removes existing configuration files safely
remove_config_files() {
    rm -f "/etc/pulse/system.pa"
    rm -f "/etc/pulse/default.pa"
    rm -f "/etc/pulse/daemon.conf"
    rm -f "/var/lib/alsa/asound.state"
    rm -f "/etc/ovos_asound.state"
}

# Creates necessary symbolic links for configuration files
create_configuration_symlinks() {
    ln -sf "$ASOUND_STATE" /etc/ovos_asound.state
    ln -sf "$ASOUND_STATE" /var/lib/alsa/asound.state
    ln -sf "$PULSE_SYSTEM" /etc/pulse/system.pa
    ln -sf "$PULSE_SYSTEM" /etc/pulse/default.pa
    ln -sf "$PULSE_DAEMON" /etc/pulse/daemon.conf
}

# Main execution
main() {
    # Detecting I2C devices
    for device in "${!devices[@]}"; do
        address="${devices[$device]}"
        if detect_i2c_device "$address"; then
            detection_results[$device]=true
        else
            detection_results[$device]=false
        fi
        echo "$device detection result: ${detection_results[$device]}"
    done

    # Handling hardware-specific configurations
    if [[ ${detection_results[WM8960]} == true ]] ; then
        echo "WM8xxx based HAT found"
        atmega328p=$(avrdude -p atmega328p -C /etc/avrdude-gpio.conf -c linuxgpio -U signature:r:-:i -F 2>/dev/null | head -n1)
        if [ "${atmega328p}" == ":030000001E950F3B" ] ; then
            detection_results[MARK1]=true
            echo "Mark-1 enclosure $MARK1"
        else
            echo "WM8960 based 2-mic $WM8960"
        fi
    fi

    if [[ ${detection_results[WM8960]} == true ]] && [[ ${detection_results[RESPEAKER4]} == false ]] ; then
        echo "Installing and configuring WM8960 based 2-mic HAT"
        dtoverlay wm8960-soundcard
        ASOUND_STATE=/etc/voicecard/wm8960_asound.state
        echo "Configuring board"
        sleep 3 # Allow some time to fully initialise the hardware / driver
        amixer -c "wm8960soundcard" cset numid=1 34,34
        amixer -c "wm8960soundcard" cset numid=26 3
        amixer -c "wm8960soundcard" cset numid=27 4
        amixer -c "wm8960soundcard" cset numid=30 5
        amixer -c "wm8960soundcard" cset numid=32 5
        amixer -c "wm8960soundcard" cset numid=33 5
        amixer -c "wm8960soundcard" cset numid=34 25
        amixer -c "wm8960soundcard" cset numid=35 on
        amixer -c "wm8960soundcard" cset numid=9 3
        amixer -c "wm8960soundcard" cset numid=8 3
        amixer -c "wm8960soundcard" cset numid=49 on
        amixer -c "wm8960soundcard" cset numid=51 on
        amixer -c "wm8960soundcard" cset numid=37 0
        amixer -c "wm8960soundcard" cset numid=38 0
        amixer -c "wm8960soundcard" cset numid=39 5
        amixer -c "wm8960soundcard" cset numid=48 on
        amixer -c "wm8960soundcard" cset numid=50 on
        amixer -c "wm8960soundcard" cset numid=54 on
        amixer -c "wm8960soundcard" cset numid=16 5
        amixer -c "wm8960soundcard" cset numid=15 4
        # echo "Configuring button"
        # dtoverlay wm8960-button-overlay
    fi

    if [[ ${detection_results[MARK1]} == true ]] ; then
        echo "Installing and configuring WM8731 based sound HAT"
        dtoverlay proto-codec
        echo "Configuring board"
        sleep 3 # Allow some time to fully initialise the hardware / driver
        amixer -c "sndrpiproto" cset numid=1 107,107
        amixer -c "sndrpiproto" cset numid=2 on
        amixer -c "sndrpiproto" cset numid=6 on
        amixer -c "sndrpiproto" cset numid=10 on
        amixer -c "sndrpiproto" cset numid=14 1
        amixer -c "sndrpiproto" cset numid=13 on
        amixer -c "sndrpiproto" cset numid=9 on
        echo "Resetting Mark-1 faceplate"
        echo "eyes.color=7365993" > /dev/ttyAMA0  # color=soft gray, #706569
        echo "mouth.text=" > /dev/ttyAMA0
    fi

    if [[ ${detection_results[RESPEAKER6]} == true ]] && [[ ${detection_results[RESPEAKER4]} == false ]] ; then
        echo "Installing and configuring ReSpeaker 4-mic"
        dtoverlay seeed-4mic-voicecard
        ASOUND_STATE=/etc/voicecard/ac108_asound.state
        PULSE_SYSTEM=/etc/pulse/default.pa.d/seeed-voicecard-4mic-default.pa
        PULSE_DAEMON=/usr/share/pulseaudio/alsa-mixer/profile-sets/seeed-voicecard-4mic-daemon.conf
    fi

    if [[ ${detection_results[RESPEAKER6]} == true ]] && [[ ${detection_results[RESPEAKER4]} == true ]] ; then
        echo "Installing and configuring ReSpeaker 6mic"
        dtoverlay seeed-8mic-voicecard
        ASOUND_STATE=/etc/voicecard/ac108_6mic.state
        PULSE_SYSTEM=/etc/pulse/default.pa.d/seeed-voicecard-8mic-default.pa
        PULSE_DAEMON=/usr/share/pulseaudio/alsa-mixer/profile-sets/seeed-voicecard-8mic-daemon.conf
    fi

    if [[ ${detection_results[ADAFRUIT]} == true ]] ; then
        echo "Installing and configuring Adafruit"
        /usr/sbin/i2cset -y 1 0x4b 30 # Set maximum volume to 30
    fi

    if [[ ${detection_results[TAS5806]} == true ]] ; then
        echo "Installing and configuring SJ-201 HAT"
        # Initializing XMOS xvf3510
        dtoverlay xvf3510
        xvf3510-flash --direct "/usr/lib/firmware/xvf3510/app_xvf3510_int_spi_boot_v4_1_0.bin"
        # Initializing Texas Instruments 5806 Amplifier
        /usr/bin/tas5806-init
        if [[ ${detection_results[SJ201LED]} == true ]] ; then
        echo "Found revision-6 SJ-201 board"
        # Initializing and resetting LED ring
        /usr/bin/sj201-reset-led
        # Reset FAN to low speed
        /usr/sbin/i2cset -a -y 1 0x04 101 30 i
        else
        echo "Assume revision-10 SJ-201 board"
        dtoverlay sj201-rev10-pwm-fan-overlay
        fi
        echo "Configuring buttons"
        dtoverlay sj201-buttons-overlay
    #
        PULSE_SYSTEM=/etc/pulse/default.pa.d/sj201-default.pa
        PULSE_DAEMON=/usr/share/pulseaudio/alsa-mixer/profile-sets/sj201-daemon.conf
    fi

    if [[ ${detection_results[AIYVOICEBONNET]} == true ]] ; then
        echo "AIY VoiceBonnet"
    #     ASOUND_STATE=/usr/share/pulseaudio/alsa-mixer/profile-sets/aiy-voicebonnet-v2.conf
    fi

    # Cleaning up old configurations
    remove_config_files

    # Setting up configuration symlinks
    create_configuration_symlinks

    # Restoring sound levels
    alsactl -E HOME=/run/alsa -f /etc/ovos_asound.state restore
}

# Run the main function
main
